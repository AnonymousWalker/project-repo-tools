#!/usr/bin/env python3
# -*- coding: utf8 -*-
#
#  Copyright (c) 2019 unfoldingWord
#  http://creativecommons.org/licenses/MIT/
#  See LICENSE file for details.
#
#  Contributors:
#  Richard Mahn <rich.mahn@unfoldingword.org>

"""
This script generates the HTML and PDF OBS SN document
"""
import os
import re
import markdown2
from glob import glob
from bs4 import BeautifulSoup
from .pdf_converter import PdfConverter, run_converter
from ..general_tools.file_utils import write_file


class ObsSnPdfConverter(PdfConverter):

    def save_bad_links_html(self):
        bad_links = '''
<!DOCTYPE html>
    <html lang="en-US">
        <head>
            <title>
                NON-MATCHING NOTES
            </title>
            <meta charset="utf-8">
        </head>
<body>
    <h1>NON-MATCHING NOTES (i.e. not found in the frame text as written):</h1>
    <ul>
'''
        for cf in sorted(self.bad_links.keys()):
            bad_links += '''
        <li>
            <a href="html/{0}.html#obs-sn-{1}" title="See in the OBS SN Docs (HTML)" target="obs-sn-html">{1}</a>
            <a href="https://git.door43.org/{6}/{2}_obs-sn/src/branch/{7}/content/{3}/{4}.md" style="text-decoration:none" target="obs-sn-git">
                <img src="http://www.myiconfinder.com/uploads/iconsets/16-16-65222a067a7152473c9cc51c05b85695-note.png" title="See OBS UTN note on DCS">
            </a>
            <a href="https://git.door43.org/{6}/{2}_obs/src/branch/master/content/{3}.md" style="text-decoration:none" target="obs-git">
                <img src="https://cdn3.iconfinder.com/data/icons/linecons-free-vector-icons-pack/32/photo-16.png" title="See OBS story on DCS">
            </a>:<br/>
            <i>{5}</i><br/>
            <ul>
'''.format(self.file_id, cf, self.lang_code, cf.split('-')[0], cf.split('-')[1], self.bad_links[cf]['text'], self.owner,
           self.main_resource.tag)
            for note in self.bad_links[cf]['notes']:
                for key in note.keys():
                    if note[key]:
                        bad_links += '<li><b><i>{0}</i></b><br/>{1} (QUOTE ISSUE)</li>'.format(key, note[key])
                    else:
                        bad_links += '<li><b><i>{0}</i></b></li>'.format(key)
            bad_links += '''
            </ul>
        </li>
'''
        bad_links += '''
    </u>
</body>
</html>
'''
        save_file = os.path.join(self.output_dir, '{0}_bad_notes.html'.format(self.file_id))
        write_file(save_file, bad_links)
        self.logger.info('BAD NOTES file can be found at {0}'.format(save_file))

    def get_body_html(self):
        self.logger.info('Generating OBS SN html...')
        obs_sn_html = '''
<section id="obs-sn">
    <div class="resource-title-page">
        <img src="html/{0}.png" class="logo" alt="UTN">
        <h1 class="section-header">{1}</h1>
    </div>
'''.format(self.resources['obs'].resource_name, self.title.replace('unfoldingWordÂ® ', ''))
        obs_chapter_files = sorted(glob(os.path.join(self.resources['obs'].repo_dir, 'content', '*.md')))
        for chapter_file in obs_chapter_files:
            if os.path.isfile(chapter_file):
                chapter_num = os.path.splitext(os.path.basename(chapter_file))[0]
                soup = BeautifulSoup(
                    markdown2.markdown_path(chapter_file),
                    'html.parser')
                title = soup.h1.text
                paragraphs = soup.find_all('p')
                frames = []
                for idx, p in enumerate(paragraphs):  # iterate over loop [above sections]
                    if idx % 2:
                        obs_text = p.text
                        obs_text = re.sub(r'[\n\s]+', ' ', obs_text, flags=re.MULTILINE)
                        frames.append(obs_text)
                chapter_id = 'obs-sn-{0}'.format(chapter_num)
                obs_sn_html += '<article id="{0}">\n\n'.format(chapter_id)
                obs_sn_html += '<h2 class="section-header">{0}</h2>\n'.format(title)
                rc = 'rc://{0}/obs-sn/help/{1}'.format(self.lang_code, chapter_num)
                self.resource_data[rc] = {
                    'rc': rc,
                    'id': chapter_id,
                    'link': '#' + chapter_id,
                    'title': title
                }
                self.rc_lookup[chapter_id] = rc
                for frame_idx, obs_text in enumerate(frames):
                    frame_num = str(frame_idx+1).zfill(2)
                    frame_id = 'obs-sn-{0}-{1}'.format(chapter_num, frame_num)
                    obs_sn_html += '<div id="{0}" class="frame">\n'.format(frame_id)
                    obs_sn_html += '<h3>{0}:{1}</h3>\n'.format(chapter_num, frame_num)
                    # chapter_soup.ul.append(soup('<li><a href="#{0}">{1}</a></li>'))
                    frame_notes = ''
                    frame_notes_file = os.path.join(self.resources['obs-sn'].repo_dir, 'content', chapter_num, '{0}.md'.format(frame_num))
                    if os.path.isfile(frame_notes_file):
                        frame_notes = markdown2.markdown_path(frame_notes_file)
                        frame_notes = frame_notes.replace('h1>', 'h4>')
                        frame_notes = frame_notes.replace('h2>', 'h5>')
                        frame_notes = frame_notes.replace('h3>', 'h6>')
                        frame_notes = re.sub(r'href="(\d+)/(\d+)"', r'href="#obs-sn-\1-\2"', frame_notes)
                    if obs_text and frame_notes:
                        obs_text = self.highlight_text_with_frame(obs_text, frame_notes, '{0}:{1}'.format(chapter_num,
                                                                                                          frame_num))
                    obs_sn_html += '<div id="{0}-text" class="frame-text">\n{1}\n</div>\n'.format(frame_id, obs_text)
                    obs_sn_html += frame_notes
                    if frame_idx < len(frames) - 1:
                        obs_sn_html += '<hr class="frame-divider"/>'
                    obs_sn_html += '</div>\n\n'
                    # HANDLE RC LINKS
                    rc = 'rc://{0}/obs-sn/help/{1}/{2}'.format(self.lang_code, chapter_num, frame_num)
                    self.resource_data[rc] = {
                        'rc': rc,
                        'id': frame_id,
                        'link': '#' + frame_id,
                        'title': title
                    }
                    self.rc_lookup[frame_id] = rc
                obs_sn_html += '</article>\n\n'
        obs_sn_html += '</section>'
        return obs_sn_html


if __name__ == '__main__':
    run_converter(['obs-sn', 'obs'], ObsSnPdfConverter)
