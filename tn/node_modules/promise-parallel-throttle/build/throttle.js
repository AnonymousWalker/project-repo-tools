"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var DEFAULT_MAX = 5;
/**
 * Default checker which validates if a next task should begin.
 * This can be overwritten to write own checks for example checking the amount
 * of used ram and waiting till the ram is low enough for a next task.
 *
 * It should always resolve with a boolean, either `true` to start a next task
 * or `false` to stop executing a new task.
 *
 * If this method rejects, the error will propagate to the caller
 * @param status
 * @param tasks
 * @returns {Promise}
 */
var defaultNextTaskCheck = function (status, tasks) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, Promise.resolve(status.amountStarted < tasks.length)];
    });
}); };
var DEFAULT_OPTIONS = {
    maxInProgress: DEFAULT_MAX,
    failFast: false,
    nextCheck: defaultNextTaskCheck,
    ignoreIsFunctionCheck: false
};
/**
 * Raw throttle function, which can return extra meta data.
 * @param tasks required array of tasks to be executed
 * @param options Options object
 * @returns {Promise}
 */
function raw(tasks, options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var myOptions = Object.assign({}, DEFAULT_OPTIONS, options);
                    var result = {
                        amountDone: 0,
                        amountStarted: 0,
                        amountResolved: 0,
                        amountRejected: 0,
                        amountNextCheckFalsey: 0,
                        rejectedIndexes: [],
                        resolvedIndexes: [],
                        nextCheckFalseyIndexes: [],
                        taskResults: []
                    };
                    if (tasks.length === 0) {
                        return resolve(result);
                    }
                    var failedFast = false;
                    var currentTaskIndex = 0;
                    var executeTask = function (index) {
                        result.amountStarted++;
                        if (typeof tasks[index] === 'function') {
                            tasks[index]().then(function (taskResult) {
                                result.taskResults[index] = taskResult;
                                result.resolvedIndexes.push(index);
                                result.amountResolved++;
                                taskDone();
                            }, function (error) {
                                result.taskResults[index] = error;
                                result.rejectedIndexes.push(index);
                                result.amountRejected++;
                                if (myOptions.failFast === true) {
                                    failedFast = true;
                                    return reject(result);
                                }
                                taskDone();
                            });
                        }
                        else if (myOptions.ignoreIsFunctionCheck === true) {
                            result.taskResults[index] = tasks[index];
                            result.resolvedIndexes.push(index);
                            result.amountResolved++;
                            taskDone();
                        }
                        else {
                            failedFast = true;
                            return reject(new Error('tasks[' + index + ']: ' + tasks[index] + ', is supposed to be of type function'));
                        }
                    };
                    var taskDone = function () {
                        //make sure no more tasks are spawned when we failedFast
                        if (failedFast === true) {
                            return;
                        }
                        result.amountDone++;
                        if (typeof myOptions.progressCallback === 'function') {
                            myOptions.progressCallback(result);
                        }
                        if (result.amountDone === tasks.length) {
                            return resolve(result);
                        }
                        if (currentTaskIndex < tasks.length) {
                            nextTask(currentTaskIndex++);
                        }
                    };
                    var nextTask = function (index) {
                        //check if we can execute the next task
                        myOptions.nextCheck(result, tasks).then(function (canExecuteNextTask) {
                            if (canExecuteNextTask === true) {
                                //execute it
                                executeTask(index);
                            }
                            else {
                                result.amountNextCheckFalsey++;
                                result.nextCheckFalseyIndexes.push(index);
                                taskDone();
                            }
                        }, reject);
                    };
                    //spawn the first X task
                    for (var i = 0; i < Math.min(myOptions.maxInProgress, tasks.length); i++) {
                        nextTask(currentTaskIndex++);
                    }
                })];
        });
    });
}
exports.raw = raw;
/**
 * Executes the raw function, but only return the task array
 * @param tasks
 * @param options
 * @returns {Promise}
 */
function executeRaw(tasks, options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    raw(tasks, options).then(function (result) {
                        resolve(result.taskResults);
                    }, function (error) {
                        if (error instanceof Error) {
                            reject(error);
                        }
                        else {
                            reject(error.taskResults[error.rejectedIndexes[0]]);
                        }
                    });
                })];
        });
    });
}
/**
 * Simply run all the promises after each other, so in synchronous manner
 * @param tasks required array of tasks to be executed
 * @param options Options object
 * @returns {Promise}
 */
function sync(tasks, options) {
    return __awaiter(this, void 0, void 0, function () {
        var myOptions;
        return __generator(this, function (_a) {
            myOptions = Object.assign({}, { maxInProgress: 1, failFast: true }, options);
            return [2 /*return*/, executeRaw(tasks, myOptions)];
        });
    });
}
exports.sync = sync;
/**
 * Exposes the same behaviour as Promise.All(), but throttled!
 * @param tasks required array of tasks to be executed
 * @param options Options object
 * @returns {Promise}
 */
function all(tasks, options) {
    return __awaiter(this, void 0, void 0, function () {
        var myOptions;
        return __generator(this, function (_a) {
            myOptions = Object.assign({}, { failFast: true }, options);
            return [2 /*return*/, executeRaw(tasks, myOptions)];
        });
    });
}
exports.all = all;
//# sourceMappingURL=throttle.js.map