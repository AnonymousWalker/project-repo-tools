'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.read = read;
exports.download = download;

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _followRedirects = require('follow-redirects');

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HttpAgent = require('agentkeepalive');
var HttpsAgent = require('agentkeepalive').HttpsAgent;

var httpAgent = new HttpAgent();
var httpsAgent = new HttpsAgent();

/**
 * @description Reads the contents of a url as a string.
 * @param {String} uri the url to read
 * @return {Promise.<string>} the url contents
 */
function read(uri) {
  var parsedUrl = _url2.default.parse(uri, false, true);
  var makeRequest = parsedUrl.protocol === 'https:' ? _followRedirects.https.request.bind(_followRedirects.https) : _followRedirects.http.request.bind(_followRedirects.http);
  var serverPort = parsedUrl.port ? parsedUrl.port : parsedUrl.protocol === 'https:' ? 443 : 80;
  var agent = parsedUrl.protocol === 'https:' ? httpsAgent : httpAgent;

  var options = {
    host: parsedUrl.host,
    path: parsedUrl.path,
    agent: agent,
    port: serverPort,
    method: 'GET',
    headers: { 'Content-Type': 'application/json' }
  };

  return new Promise(function (resolve, reject) {
    var req = makeRequest(options, function (response) {
      var data = '';
      response.on('data', function (chunk) {
        data += chunk;
      });
      response.on('end', function () {
        resolve({
          status: response.statusCode,
          data: data
        });
      });
    });

    req.on('socket', function (socket) {
      socket.setTimeout(30000);
    });
    req.on('error', reject);
    req.end();
  });
}

/**
 * @description Downloads a url to a file.
 * @param {String} uri the uri to download
 * @param {String} dest the file to download the uri to
 * @param {Function} progressCallback receives progress updates
 * @return {Promise.<{}|Error>} the status code or an error
 */
function download(uri, dest, progressCallback) {
  progressCallback = progressCallback || function () {};
  var parsedUrl = _url2.default.parse(uri, false, true);
  var makeRequest = parsedUrl.protocol === 'https:' ? _followRedirects.https.request.bind(_followRedirects.https) : _followRedirects.http.request.bind(_followRedirects.http);
  var serverPort = parsedUrl.port ? parsedUrl.port : parsedUrl.protocol === 'https:' ? 443 : 80;
  var agent = parsedUrl.protocol === 'https:' ? httpsAgent : httpAgent;
  var file = _fsExtra2.default.createWriteStream(dest);

  var options = {
    host: parsedUrl.host,
    path: parsedUrl.path,
    agent: agent,
    port: serverPort,
    method: 'GET'
  };

  return new Promise(function (resolve, reject) {
    var req = makeRequest(options, function (response) {
      var size = response.headers['content-length'];
      var progress = 0;

      response.on('data', function (chunk) {
        progress += chunk.length;
        progressCallback(size, progress);
      });

      response.pipe(file);
      file.on('finish', function () {
        resolve({
          uri: uri,
          dest: dest,
          status: response.statusCode
        });
      });
    });

    req.on('error', function (error) {
      file.end();
      _rimraf2.default.sync(dest);
      reject(error);
    });

    req.end();
  });
}