'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadResources = exports.downloadAndProcessResourceWithCatch = exports.downloadAndProcessResource = undefined;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _pathExtra = require('path-extra');

var _pathExtra2 = _interopRequireDefault(_pathExtra);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _promiseParallelThrottle = require('promise-parallel-throttle');

var Throttle = _interopRequireWildcard(_promiseParallelThrottle);

var _resourcesHelpers = require('./resourcesHelpers');

var _parseHelpers = require('./parseHelpers');

var parseHelpers = _interopRequireWildcard(_parseHelpers);

var _downloadHelpers = require('./downloadHelpers');

var downloadHelpers = _interopRequireWildcard(_downloadHelpers);

var _moveResourcesHelpers = require('./moveResourcesHelpers');

var moveResourcesHelpers = _interopRequireWildcard(_moveResourcesHelpers);

var _errors = require('../resources/errors');

var errors = _interopRequireWildcard(_errors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
// helpers

// constants


/**
 * @description Downloads the resources that need to be updated for a given language using the DCS API
 * @param {Object.<{
 *             languageId: String,
 *             resourceId: String,
 *             localModifiedTime: String,
 *             remoteModifiedTime: String,
 *             downloadUrl: String,
 *             version: String,
 *             subject: String,
 *             catalogEntry: {langResource, bookResource, format}
 *           }>} resource - resource to download
 * @param {String} resourcesPath Path to the resources directory
 * @return {Promise} Download promise
 */
var downloadAndProcessResource = exports.downloadAndProcessResource = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(resource, resourcesPath) {
    var importsPath, importPath, zipFilePath, zipFileName, importSubdirPath, processedFilesPath, twGroupDataPath, twGroupDataResourcesPath, resourcePath, errorMessage;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (resource) {
              _context.next = 2;
              break;
            }

            throw Error(errors.RESOURCE_NOT_GIVEN);

          case 2:
            if (resourcesPath) {
              _context.next = 4;
              break;
            }

            throw Error((0, _resourcesHelpers.formatError)(resource, errors.RESOURCES_PATH_NOT_GIVEN));

          case 4:
            _fsExtra2.default.ensureDirSync(resourcesPath);
            importsPath = _pathExtra2.default.join(resourcesPath, 'imports');

            _fsExtra2.default.ensureDirSync(importsPath);
            importPath = null;
            zipFilePath = null;
            _context.prev = 9;
            _context.prev = 10;
            zipFileName = resource.languageId + '_' + resource.resourceId + '_v' + resource.version + '.zip';

            zipFilePath = _pathExtra2.default.join(importsPath, zipFileName);
            console.log("Downloading: " + resource.downloadUrl);
            _context.next = 16;
            return downloadHelpers.download(resource.downloadUrl, zipFilePath);

          case 16:
            _context.next = 21;
            break;

          case 18:
            _context.prev = 18;
            _context.t0 = _context['catch'](10);
            throw Error((0, _resourcesHelpers.appendError)(errors.UNABLE_TO_DOWNLOAD_RESOURCES, _context.t0));

          case 21:
            _context.prev = 21;
            _context.next = 24;
            return (0, _resourcesHelpers.unzipResource)(resource, zipFilePath, resourcesPath);

          case 24:
            importPath = _context.sent;
            _context.next = 30;
            break;

          case 27:
            _context.prev = 27;
            _context.t1 = _context['catch'](21);
            throw Error((0, _resourcesHelpers.appendError)(errors.UNABLE_TO_UNZIP_RESOURCES, _context.t1));

          case 30:
            importSubdirPath = (0, _resourcesHelpers.getSubdirOfUnzippedResource)(importPath);
            processedFilesPath = (0, _resourcesHelpers.processResource)(resource, importSubdirPath);

            if (!processedFilesPath) {
              _context.next = 57;
              break;
            }

            if (!(resource.languageId === 'grc' && resource.resourceId === 'ugnt' || resource.languageId === 'hbo' && resource.resourceId === 'uhb')) {
              _context.next = 45;
              break;
            }

            twGroupDataPath = (0, _resourcesHelpers.makeTwGroupDataResource)(resource, processedFilesPath);
            twGroupDataResourcesPath = _pathExtra2.default.join(resourcesPath, resource.languageId, 'translationHelps', 'translationWords', 'v' + resource.version);
            _context.prev = 36;
            _context.next = 39;
            return moveResourcesHelpers.moveResources(twGroupDataPath, twGroupDataResourcesPath);

          case 39:
            (0, _resourcesHelpers.removeAllButLatestVersion)(_pathExtra2.default.dirname(twGroupDataResourcesPath));
            _context.next = 45;
            break;

          case 42:
            _context.prev = 42;
            _context.t2 = _context['catch'](36);
            throw Error((0, _resourcesHelpers.appendError)(errors.UNABLE_TO_CREATE_TW_GROUP_DATA, _context.t2));

          case 45:
            resourcePath = (0, _resourcesHelpers.getActualResourcePath)(resource, resourcesPath);
            _context.prev = 46;
            _context.next = 49;
            return moveResourcesHelpers.moveResources(processedFilesPath, resourcePath);

          case 49:
            _context.next = 54;
            break;

          case 51:
            _context.prev = 51;
            _context.t3 = _context['catch'](46);
            throw Error((0, _resourcesHelpers.appendError)(errors.UNABLE_TO_MOVE_RESOURCE_INTO_RESOURCES, _context.t3));

          case 54:
            (0, _resourcesHelpers.removeAllButLatestVersion)(_pathExtra2.default.dirname(resourcePath));
            _context.next = 58;
            break;

          case 57:
            throw Error(errors.FAILED_TO_PROCESS_RESOURCE);

          case 58:
            _context.next = 65;
            break;

          case 60:
            _context.prev = 60;
            _context.t4 = _context['catch'](9);
            errorMessage = (0, _resourcesHelpers.getErrorMessage)(_context.t4);

            console.log("Error getting " + resource.downloadUrl + ': ' + errorMessage);
            throw Error((0, _resourcesHelpers.formatError)(resource, errorMessage));

          case 65:
            _context.prev = 65;

            if (zipFilePath) {
              _rimraf2.default.sync(zipFilePath, _fsExtra2.default);
            }
            if (importPath) {
              _rimraf2.default.sync(importPath, _fsExtra2.default);
            }
            return _context.finish(65);

          case 69:
            console.log("Processed: " + resource.downloadUrl);
            return _context.abrupt('return', resource);

          case 71:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[9, 60, 65, 69], [10, 18], [21, 27], [36, 42], [46, 51]]);
  }));

  return function downloadAndProcessResource(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * downloads and processes the resource catching and saving errors
 * @param {Object} resource being downloaded
 * @param {String} resourcesPath - path to save resources
 * @param {Array} errorList - keeps track of errors
 * @return {Promise} promise
 */
var downloadAndProcessResourceWithCatch = exports.downloadAndProcessResourceWithCatch = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(resource, resourcesPath, errorList) {
    var result;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            result = null;
            _context2.prev = 1;
            _context2.next = 4;
            return downloadAndProcessResource(resource, resourcesPath);

          case 4:
            result = _context2.sent;

            console.log("Download Success: " + resource.downloadUrl);
            _context2.next = 13;
            break;

          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2['catch'](1);

            console.log("Download Error:");
            console.log(_context2.t0);
            errorList.push(_context2.t0);

          case 13:
            return _context2.abrupt('return', result);

          case 14:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[1, 8]]);
  }));

  return function downloadAndProcessResourceWithCatch(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * @description Downloads the resources that need to be updated for the given languages using the DCS API
 * @param {Array} languageList - Array of languages to download the resources for
 * @param {String} resourcesPath - Path to the resources directory where each resource will be placed
 * @param {Array.<{
 *                   languageId: String,
 *                   resourceId: String,
 *                   localModifiedTime: String,
 *                   remoteModifiedTime: String,
 *                   downloadUrl: String,
 *                   version: String,
 *                   subject: String,
 *                   catalogEntry: {langResource, bookResource, format}
 *                 }>} resources - resources that will be downloaded if the lanugage IDs match
 * @return {Promise} Promise that returns a list of all the resources updated, rejects if
 * any fail
 */
var downloadResources = exports.downloadResources = function downloadResources(languageList, resourcesPath, resources) {
  return new Promise(function (resolve, reject) {
    if (!languageList || !languageList.length) {
      reject(errors.LANGUAGE_LIST_EMPTY);
      return;
    }
    if (!resourcesPath) {
      reject(errors.RESOURCES_PATH_NOT_GIVEN);
      return;
    }
    _fsExtra2.default.ensureDirSync(resourcesPath);
    var importsDir = _pathExtra2.default.join(resourcesPath, 'imports');
    var downloadableResources = [];
    languageList.forEach(function (languageId) {
      downloadableResources = downloadableResources.concat(parseHelpers.getResourcesForLanguage(resources, languageId));
    });

    if (!downloadableResources || !downloadableResources.length) {
      resolve([]);
      return;
    }

    var errorList = [];
    downloadableResources = downloadableResources.filter(function (resource) {
      return resource;
    });
    var queue = downloadableResources.map(function (resource) {
      return function () {
        return downloadAndProcessResourceWithCatch(resource, resourcesPath, errorList);
      };
    });
    Throttle.all(queue, { maxInProgress: 2 }).then(function (result) {
      _rimraf2.default.sync(importsDir, _fsExtra2.default);
      if (!errorList.length) {
        resolve(result);
      } else {
        var errorMessages = errorList.map(function (e) {
          return e.message || e;
        });
        var returnErrorMessage = errorMessages.join('\n');
        reject(new Error(returnErrorMessage));
      }
    }, function (err) {
      _rimraf2.default.sync(importsDir, _fsExtra2.default);
      reject(err);
    });
  });
};