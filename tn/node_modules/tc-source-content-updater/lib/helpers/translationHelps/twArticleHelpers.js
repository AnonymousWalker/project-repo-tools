'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processTranslationWords = processTranslationWords;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _pathExtra = require('path-extra');

var _pathExtra2 = _interopRequireDefault(_pathExtra);

var _util = require('util');

var _resourcesHelpers = require('../resourcesHelpers');

var resourcesHelpers = _interopRequireWildcard(_resourcesHelpers);

var _errors = require('../../resources/errors');

var errors = _interopRequireWildcard(_errors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @description Processes the extracted files for translationWord to cerate the folder
 * structure and produce the index.js file for the language with the title of each article.
 * @param {Object} resource - Resource object
 * @param {String} sourcePath - Path to the extracted files that came from the zip file from the catalog
 * @param {String} outputPath - Path to place the processed resource files WIHTOUT the version in the path
 * @return {Boolean} true if success
 */

// helpers
function processTranslationWords(resource, sourcePath, outputPath) {
  if (!resource || !(0, _util.isObject)(resource) || !resource.languageId || !resource.resourceId) throw Error(resourcesHelpers.formatError(resource, errors.RESOURCE_NOT_GIVEN));
  if (!sourcePath) throw Error(resourcesHelpers.formatError(resource, errors.SOURCE_PATH_NOT_GIVEN));
  if (!_fsExtra2.default.pathExistsSync(sourcePath)) throw Error(resourcesHelpers.formatError(resource, errors.SOURCE_PATH_NOT_EXIST));
  if (!outputPath) throw Error(resourcesHelpers.formatError(resource, errors.OUTPUT_PATH_NOT_GIVEN));
  if (_fsExtra2.default.pathExistsSync(outputPath)) _fsExtra2.default.removeSync(outputPath);
  var typesPath = _pathExtra2.default.join(sourcePath, 'bible');
  var isDirectory = function isDirectory(item) {
    return _fsExtra2.default.lstatSync(_pathExtra2.default.join(typesPath, item)).isDirectory();
  };
  var typeDirs = _fsExtra2.default.readdirSync(typesPath).filter(isDirectory);
  typeDirs.forEach(function (typeDir) {
    var typePath = _pathExtra2.default.join(typesPath, typeDir);
    var files = _fsExtra2.default.readdirSync(typePath).filter(function (filename) {
      return _pathExtra2.default.extname(filename) === '.md';
    });
    generateGroupsIndex(typePath, outputPath, typeDir);
    files.forEach(function (fileName) {
      var sourcePath = _pathExtra2.default.join(typePath, fileName);
      var destinationPath = _pathExtra2.default.join(outputPath, typeDir, 'articles', fileName);
      _fsExtra2.default.copySync(sourcePath, destinationPath);
    });
  });
  return true;
}

/**
 * @description - Generates the groups index for the tw articles (both kt, other and names).
 * @param {String} filesPath - Path to all tw markdown artciles.
 * @param {String} twOutputPath Path to the resource location in the static folder.
 * @param {String} folderName article type. ex. kt or other.
 */

// constants
function generateGroupsIndex(filesPath, twOutputPath, folderName) {
  var groupsIndex = [];
  var groupIds = _fsExtra2.default.readdirSync(filesPath).filter(function (filename) {
    return filename.split('.').pop() === 'md';
  });
  groupIds.forEach(function (fileName) {
    var groupObject = {};
    var filePath = _pathExtra2.default.join(filesPath, fileName);
    var articleFile = _fsExtra2.default.readFileSync(filePath, 'utf8');
    var groupId = fileName.replace('.md', '');
    // get the article's first line and remove #'s and spaces from beginning/end
    var groupName = articleFile.split('\n')[0].replace(/(^\s*#\s*|\s*#\s*$)/gi, '');
    groupObject.id = groupId;
    groupObject.name = groupName;
    groupsIndex.push(groupObject);
  });
  groupsIndex.sort(compareByFirstUniqueWord);
  var groupsIndexOutputPath = _pathExtra2.default.join(twOutputPath, folderName, 'index.json');

  _fsExtra2.default.outputJsonSync(groupsIndexOutputPath, groupsIndex, { spaces: 2 });
}

/**
 * Splits the string into words delimited by commas and compares the first unique word
 * @param {String} a first string to be compared
 * @param {String} b second string to be compared
 * @return {int} comparison result
 */
function compareByFirstUniqueWord(a, b) {
  var aWords = a.name.toUpperCase().split(',');
  var bWords = b.name.toUpperCase().split(',');
  while (aWords.length || bWords.length) {
    if (!aWords.length) return -1;
    if (!bWords.length) return 1;
    var aWord = aWords.shift().trim();
    var bWord = bWords.shift().trim();
    if (aWord !== bWord) return aWord < bWord ? -1 : 1;
  }
  return 0; // both lists are the same
}